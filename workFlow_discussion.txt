> Handling Priority requests:
OPTION 1: (better if the capture requests takes a long time to process)
If there are multiple requests (> 1) coming for the same camera to capture images, with different
priority. So all the requests can be queued in a Distributed Messaging System like rabbitMQ or kafka.
Kafka won't support message prioritization directly, but we can create special topics depending on the 
request priority (e.g. LOW, MEDIUM, HIGH) and on the consumer side consume the requests first from
the HIGHEST priority TOPIC and lastly from the LOWEST PRIORITY TOPIC
OR we can also use RabbitMQ which does support prioritization of messages based on priority value
We can maintain another field in the database to know when the process is COMPLETED or FAILED, the process of capturing images by a camera. So we will constantly poll the DB and check this flag whether its been updated or NOT. ONCE its updated, depending on the SUCCESS or FAILURE we can return the result to the user, who anyway would be waiting for the response via HTTP LONG POLLING 

RequestTracker
- userID (**SECONDARY KEY if functionality like user's history needs to be shown etc) 
- requestID (PRIMARY KEY)
- cameraID
- ENUM status (INPROGESS, SUCCESS, FAILED)

An entry will be made to the request tracker as soon as the capture request is consumed for execution and ultimately the status will be set based on the success or failure. 

A document DB like MongoDB can be used for this, given its scalability and per Document transaction capabilities.

OPTION 2:
Problem with option 1 would be that its not really necessary to queue everything in kafka as the capturing process might just be very quick, like some milliseconds and in that case using kafka or any other distributed messaging system would be an overkill or overengineering. 
What we can do is, at the captureRequestHandler itself, we can maintain a priority queue, i.e. in-memory, and keeping queuing all the requests to a busy CAMERA in the queue according to their priority and once the request becomes serveable, the request can be sent to the CaptureEngine asynchronously along with the callbacks. So if the capturing time is very less, i.e lets in orders of milliseconds or few seconds, then this approach can be good enough and of course the capturingRequestHandler service can be horizontally scaled with a Load balancer ahead of it, such a system should also be a good option.

> Handling concurrent requests:
If there are multiple requests (> 1) coming for the same camera to capture images, with same priority, 
then we can either go for optimized locking or pessimistic locking. So with each capturable entity, 
we will maintain in Database, a field isAvailable, that denotes its availability for usage. If no client is
using it, the flag will be true, else it will be false. By default, the camera will have the flag as true, 
We will make sure, as soon as a camera is being used the flag is turned to false and once it done using
its turned back to true.
So before asking the capturable to capture images, we check if it is available or NOT. We can go for the
optimisitic locking here, as this usecase might not have that much contention for using a shared resource
but yeah depending on more situational data, this can be decided.
We can use MongoDB here for serving the optimistic locking use case here.


There will tables in the DB to capture ongoing transactions/capture activity, like if a userID made a capture request, a requestID will be generated and saved in the DB in some TABLE and the status
of the capture would be TRACKED from there..

wasn't able to discuss/write on that part owing to time issues
